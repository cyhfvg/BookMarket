<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width= device-width, initial-scale=1.0" />
    <title>书城</title>
    <!-- 引入css样式表，和js -->
    <%- include('template/css_and_js') %>
  </head>
  <body>
    <div id="app">
      <!-- 引入 head 大图 -->
      <%- include('template/head.ejs') %>
      <!-- 导航栏 -->
      <nav class="navbar navbar-expand-sm bg-dark navbar-dark">
        <a class="navbar-brand" href="#">导航</a>
        <button
          class="navbar-toggler"
          type="button"
          data-toggle="collapse"
          data-target="#collapsibleNavbar"
        >
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="collapsibleNavbar">
          <form class="form-inline">
            <input class="form-control" type="text" placeholder="Search" />
            <button class="btn btn-success" type="button">Search</button>
          </form>
          <ul class="navbar-nav nav-pills">
            <li class="nav-item">
              <a class="nav-link" href="#">搜索</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="#">分类</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/views/sell" target="_blank"
                >我要卖书</a
              >
            </li>
            <li class="nav-item dropdown">
              <a
                class="nav-link dropdown-toggle"
                data-toggle="dropdown"
                href="#"
                >我的</a
              >
              <!-- note: 我的 标签页 -->
              <div class="dropdown-menu">
                <a
                  class="dropdown-item button"
                  :class="{display_hide:state.isLogin}"
                  data-toggle="modal"
                  data-target="#registerModal"
                  >注册</a
                >
                <a
                  class="dropdown-item button"
                  id="loginButton"
                  :class="{display_hide:state.isLogin}"
                  data-toggle="modal"
                  data-target="#loginModal"
                  >登录</a
                >
                <a
                  class="dropdown-item"
                  :class="{display_hide:!state.isLogin}"
                  href="/views/myShop"
                  target="_blank"
                  >我的摊位</a
                >
                <a
                  class="dropdown-item"
                  :class="{display_hide:!state.isLogin}"
                  href="#"
                  >购物车</a
                >
                <a
                  class="dropdown-item"
                  :class="{display_hide:!state.isLogin}"
                  href="/views/memberInfo"
                  target="_blank"
                  >个人中心</a
                >
                <!-- <a class="dropdown-item" :class="{display_hide:!state.isLogin}" href="/views/account" target="_blank">账号设置</a> -->
                <a
                  class="dropdown-item button"
                  :class="{display_hide:!state.isLogin}"
                  @click="logout()"
                  >退出登录</a
                >
              </div>
            </li>
          </ul>
        </div>
      </nav>
      <!-- 登录/注册模态框 -->
      <%- include('template/register_modal.ejs') %> <%-
      include('template/login_modal.ejs') %>

      <!-- 主体 -->
      <div class="container">
        <!-- 书城书籍 -->
        <div>
          <!-- tag: 猜你喜欢 -->
          <div v-if="likeBooks.length">
            <div class="row">
              <div class="col"><hr /></div>
              <div class="col-auto">猜你喜欢</div>
              <div class="col"><hr /></div>
            </div>
            <div class="row">
              <div class="col" v-for="(book, index) in likeBooksView">
                <div class="like_book_item" @click="showBookInfo(book)">
                  <img :src="book.pic" height="60px" width="60px" />
                </div>
              </div>
            </div>
          </div>
          <!-- tag: 全部商品 -->
          <div v-if="allBooks.length">
            <div class="row">
              <div class="col"><hr /></div>
              <div class="col-auto">全部书籍</div>
              <div class="col"><hr /></div>
            </div>
            <div class="row" v-for="n in rows">
              <div class="col" v-for="book in eachRowBooks(n)">
                <div class="book_item" @click="showBookInfo(book)">
                  <img :src="book.pic" height="120px" width="120px" />
                </div>
                <label>{{ book.name }}</label>
              </div>
            </div>
            <!-- 不满一页时，不满一行的数据单独渲染 -->
            <div class="row" v-if="remain.length">
              <div class="col" v-for="book in remain">
                <div class="book_item" @click="showBookInfo(book)">
                  <img :src="book.pic" alt="" height="120px" width="120px" />
                </div>
                <label>{{ book.name }}</label>
              </div>
              <div class="col" v-for="n in (cols - remain.length)">
                <div></div>
              </div>
            </div>
          </div>
        </div>
        <!-- Todo: 搜索书籍 -->
        <div></div>
      </div>
      <%- include('template/foot.ejs') %>
    </div>
  </body>

  <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>

  <script src="https://unpkg.com/axios@0.19.2/dist/axios.js"></script>

  <script src="/js/config.js"></script>

  <script type="text/javascript">
    let vm = new Vue({
      el: "#app",
      data() {
        return {
          alertBox: {
            alertStyle: "",
            messageInfo: "",
            messageState: "",
          },
          alertStyles: {
            danger: "alert-danger",
            dark: "alert-dark",
            info: "alert-info",
            light: "alert-light",
            primary: "alert-primary",
            secondary: "alert-secondary",
            success: "alert-success",
            warning: "alert-warning",
          },
          axiosInstance: null,
          allBooks: [],
          likeBooks: [],
          shoppingCart: [],
          curPage: 1,
          cols: 5,
          rows: 4,
          total: 0,
          state: {
            isLogin: false,
            isMsgShow: false,
          },
        };
      },
      methods: {
        /**
         * 初始化
         */
        init: function () {
          let me = this;
          // note:获取所有书籍
          me.axiosInstance
            .post("/book/allBooks", {
              page: me.curPage,
              pageSize: 4 * me.cols,
            })
            .then((response) => {
              let result = response.data;
              if (result.meta.success === true) {
                me.total = result.data.total;
                me.allBooks = result.data.books;
                if (me.allBooks.length < me.rows * me.cols) {
                  me.rows = Math.floor(me.allBooks.length / me.cols);
                }
              }
            });
          // Fixme: 获取 猜你喜欢 书籍
          me.axiosInstance.post("book/likeBooks", {}).then((response) => {
            let result = response.data;
            if (result.meta.success === true) {
              me.likeBooks = result.data;
            }
          });
        },
        /**
         * 用户注册
         */
        register: () => {
          let username = document.getElementById("registerUsername").value;
          let password = document.getElementById("registerPassword").value;
          let password1 = document.getElementById("registerPassword1").value;
          if (username === "") {
            vm.$options.methods.showAlert(
              vm.alertStyles.danger,
              "错误!",
              "用户名不可为空"
            );
          } else if (password === "" || password1 === "") {
            vm.$options.methods.showAlert(
              vm.alertStyles.danger,
              "错误!",
              "密码不可为空"
            );
          } else if (password !== password1) {
            vm.$options.methods.showAlert(
              vm.alertStyles.danger,
              "错误!",
              "两次密码必须相同"
            );
          } else {
            vm.axiosInstance
              .post("/member/register", {
                username: username,
                password: password,
              })
              .then((response) => {
                if (response.data.success === true) {
                  // window.location.replace("/");
                  document.getElementById("register_close_btn").click();
                  document.getElementById("loginButton").click();
                } else {
                  // tag: 注册失败 清空表单
                  document.getElementById("register_reset_btn").click();
                }
              })
              .catch((error) => {
                console.log(error);
              });
          }
        },
        /**
         * 用户登录
         */
        login: () => {
          let username = document.getElementById("loginUsername").value;
          let password = document.getElementById("loginPassword").value;

          vm.axiosInstance
            .post("/member/login", {
              username: username,
              password: password,
            })
            .then((response) => {
              if (response.data.success === true) {
                // 关闭 登录 模态框
                vm.state.isLogin = true;

                document.getElementById("login_close_btn").click();
              } else {
                vm.$options.methods.showAlert(
                  vm.alertStyles.warning,
                  "警告!",
                  response.data.message
                );
              }
            })
            .catch((error) => {
              console.log(error);
            });
        },
        /**
         * 用户注销
         */
        logout: () => {
          foreach();
          window.location.replace("/");
        },
        showAlert: (alertStyle, messageState, messageInfo) => {
          vm.alertBox.alertStyle = alertStyle;
          vm.alertBox.messageState = messageState;
          vm.alertBox.messageInfo = messageInfo;
          vm.state.isMsgShow = true;
        },
        hideAlert: () => {
          vm.state.isMsgShow = !vm.state.isMsgShow;
        },
        /**
         * 全部书籍每行数据
         */
        eachRowBooks: function (row) {
          let me = this;
          let cols = me.cols;
          let books = [];
          for (let i = 0; i < cols; i++) {
            books[i] = me.allBooks[(row - 1) * cols + i];
          }
          return books;
        },
        /**
         * 展示具体书籍购买页面
         */
        showBookInfo: function (book) {
          console.log("书籍购买页面");
        },
      },
      beforeCreate() {},
      created() {
        // 设置axios实例的config
        this.axiosInstance = axios.create({
          baseURL: configValue.axiosBaseURL,
          timeout: 30000,
          headers: {
            "Content-Type": "application/json",
          },
        });
        // 是否已经登录
        if (getCookie("token") != null) {
          this.state.isLogin = true;
        }
      },
      mounted() {
        this.init();
      },
      computed: {
        /**
         * 显示最多五条喜欢书籍
         */
        likeBooksView: function () {
          let me = this;
          let likeBooks = me.likeBooks;
          let len = likeBooks.length;
          let books = [];

          if (len > 5) {
            for (let i = 0; i < 5; i++) {
              books[i] = likeBooks[i];
            }
            return books;
          }

          for (let i = 0; i < len; i++) {
            books[i] = likeBooks[i];
          }
          return books;
        },
        remain: function () {
          let me = this;
          let len = me.allBooks.length;
          let count = len - me.rows * me.cols;
          let remain = [];
          for (let i = 0; i < count; i++) {
            remain[i] = me.allBooks[len - i - 1];
          }
          return remain;
        },
      },
    });
  </script>
</html>
