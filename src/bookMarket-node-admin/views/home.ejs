<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>管理员管理中心</title>
    <!-- 引入css样式表，和js -->
    <%- include('template/css_and_js') %>
  </head>
  <body>
    <div id="app">
      <!-- 引入 head 大图 -->
      <%- include('template/head.ejs') %>
      <!-- 导航栏 -->
      <nav class="navbar navbar-expand-sm bg-dark navbar-dark">
        <a class="navbar-brand" type="button">导航</a>
        <button
          class="navbar-toggler"
          type="button"
          data-toggle="collapse"
          data-target="#collapsibleNavbar"
        >
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="collapsibleNavbar">
          <!-- 搜索框 -->
          <form class="form-inline">
            <input
              class="form-control"
              v-model="searchContent"
              type="text"
              placeholder="Search"
            />
            <button class="btn btn-success" type="button" @click="search">
              Search
            </button>
          </form>
          <ul class="navbar-nav nav-pills">
            <!-- 搜索框 -->
            <li class="nav-item dropdown">
              <a
                class="nav-link dropdown-toggle"
                data-toggle="dropdown"
                href="#"
                >搜索方式</a
              >
              <div class="dropdown-menu">
                <a class="dropdown-item btn" @click="changeSearchType(1)"
                  >搜索用户</a
                >
                <a class="dropdown-item btn" @click="changeSearchType(0)"
                  >搜索订单</a
                >
                <a class="dropdown-item btn" @click="changeSearchType(2)"
                  >搜索书籍</a
                >
              </div>
            </li>
            <li class="nav-item">
              <a
                class="nav-link"
                type="button"
                @click="changeShowState('showOrder')"
                >订单管理</a
              >
            </li>
            <li class="nav-item">
              <a
                class="nav-link"
                type="button"
                @click="changeShowState('showMember')"
                >用户管理</a
              >
            </li>
            <li class="nav-item">
              <a
                class="nav-link"
                type="button"
                @click="changeShowState('showBook')"
                >书籍管理</a
              >
            </li>
            <li class="nav-item">
              <a type="button" class="nav-link" @click="logout">注销</a>
            </li>
          </ul>
        </div>
      </nav>

      <!-- 主体 -->
      <div class="container">
        <!-- 主页用户管理显示 -->
        <%- include('template/component/home_showMember.ejs') %>
      </div>

      <!-- 底部显示区 -->
      <%- include('template/foot.ejs') %>
    </div>
  </body>

  <!-- 引入 axios and vue 依赖 -->
  <%- include('template/axios_and_vue.ejs') %>

  <script type="text/javascript">
    let vm = new Vue({
      el: "#app",
      data() {
        return {
          axios: null,
          searchContent: "",
          /**
           * 搜索方式:
           * 0->订单搜索;
           * 1->用户搜索;
           * 2->书籍搜索
           */
          searchType: -1,
          searchUrl: "",
          searchParams: {},
          searchConfig: {},
          /**
           * 用户
           */
          members: [],
          checkedMembers: [],
          /**
           * 订单
           */
          orders: [],
          checkedOrders: [],
          /**
           * 书籍
           */
          books: [],
          checkedBooks: [],
          /**
           * 行数
           */
          rows: 4,
          /**
           * 列数
           */
          cols: 5,
          /**
           * 当前页码
           */
          curPage: 1,
          /**
           * 三个信号量 同时只有一个为true
           * 同时只控制一个显示区域显示
           */
          showState: {
            showMember: true,
            showOrder: false,
            showBook: false,
          },
        };
      },
      methods: {
        init: function () {
          let me = this;
          me.getAllMembers();
        },
        isOdd: function (num) {
          return parseInt(num) % 2 === 1;
        },
        isLogin: function () {
          return true;
        },
        /**
         * 初始化所有页码有关变量
         */
        initPageInfo: function () {
          let me = this;
          me.curPage = 1;
        },
        search: function () {
          let me = this;

          me.axios
            .post(me.searchUrl, me.searchParams, me.searchConfig)
            .then((response) => {
              let me = this;
              let result = response.data;
              switch (me.searchType) {
                case 0:
                  me.memberSearchChain(result);
                  break;
                case 1:
                  me.orderSearchChain(result);
                  break;
                case 2:
                  me.bookSearchChain(result);
                  break;
                default:
                  me.memberSearchChain(result);
                  break;
              }
            });
        },
        orderSearchChain: function (result) {
          // Todo: order Search ResultSet Chain
          console.dir(result);
        },
        memberSearchChain: function (result) {
          // Todo: member Search ResultSet Chain
          console.dir(result);
        },
        bookSearchChain: function (result) {
          // Todo: member Search ResultSet Chain
          console.dir(result);
        },
        /**
         * 按分页方式获取所有用户
         */
        getAllMembers: function () {
          let me = this;

          let url = "/member/listAll";
          let params = {
            page: me.curPage,
            pageSize: me.cols * me.rows,
          };
          me.axios.post(url, params).then((response) => {
            let result = response.data;
            if (result.length === 0) {
              me.initPageInfo();
              me.getAllMembers();
              return;
            }
            console.dir(result);
            me.members = result;
          });
        },
        getOtherPageMembers: function (page) {
          let me = this;
          me.curPage = page;
          me.getAllMembers();
        },
        /**
         * *分页获取订单
         */
        getAllOrders: function () {
          let me = this;
          let url = "/order/listAll";
          let params = {
            page: me.curPage,
            pageSize: me.cols * me.rows,
          };
          me.axios.post(url, params).then((response) => {
            let result = response.data;
            if (result.length === 0) {
              me.initPageInfo();
              me.getAllOrders();
              return;
            }
            me.orders = result;
          });
        },
        getOtherPageOrders: function (page) {
          let me = this;
          me.curPage = page;
          me.getAllOrders();
        },
        /**
         * 分页获取书籍
         */
        getAllBooks: function () {
          let me = this;
          let url = "/book/listAll";
          let params = {
            page: me.curPage,
            pageSize: me.cols * me.rows,
          };
          me.axios.post(url, params).then((response) => {
            let result = response.data;
            console.dir(result);
            if (result.length === 0) {
              me.initPageInfo();
              me.getAllBooks();
              return;
            }
            me.books = result;
          });
        },
        getOtherPageBooks: function (page) {
          let me = this;
          me.curPage = page;
          me.getAllBooks();
        },
        /**
         * 更改搜索方式
         */
        changeSearchType: function (typeIndex) {
          let me = this;
          if (typeIndex > 2) {
            typeIndex = 0;
          }
          me.searchType = typeIndex;
        },
        logout: function () {
          foreach();
          window.location.replace("/");
        },
        changeShowState: function (part) {
          let me = this;
          for (let key in me.showState) {
            me.showState[key] = false;
            if (key === part) {
              me.showState[key] = true;
              me.getShowData(key);
            }
          }
        },
        deleteCheckedMembers: function () {
          let me = this;
          let members = me.checkedMembers;

          let url = "/member/deleteMembers";
          let params = {
            members: members,
          };
          axios.post(url, params).then((response) => {
            window.location.reload();
          });
        },
        /**
         * 做不同管理时 根据传入的字符串
         * 使用不同方法获取对应数据
         */
        getShowData: function (part) {
          let me = this;
          me.initPageInfo();
          switch (part) {
            case "showMember":
              me.getAllMembers();
              break;
            case "showOrder":
              me.getAllOrders();
              break;
            case "showBook":
              me.getAllBooks();
              break;
            default:
              me.changeShowState("showMember");
              break;
          }
        },
      },
      watch: {
        searchType: function (newVal) {
          let me = this;
          switch (newVal) {
            case 0:
              me.searchUrl = "/order/search";
              me.searchParams = {};
              me.searchConfig = {};
              break;
            case 1:
              me.searchUrl = "/member/search";
              me.searchParams = {};
              me.searchConfig = {};
              break;
            case 2:
              me.searchUrl = "/book/search";
              me.searchParams = {};
              me.searchConfig = {};
              break;
            default:
              me.searchUrl = "";
              me.searchParams = {};
              me.searchConfig = {};
              break;
          }
        },
      },
      computed: {},
      beforeCreate() {
        // Fixme: 验证身份
        // 是否已经登录
        if (getCookie("adminToken") === null) {
          window.location.replace("/");
        }
      },
      created() {
        // 设置axios实例的config
        this.axios = axios.create({
          baseURL: configValue.axiosBaseURL,
          timeout: 30000,
          headers: {
            "Content-Type": "application/json",
          },
        });
        this.changeSearchType(0);
        this.getAllMembers();
      },
      mounted() {},
    });
  </script>
</html>
